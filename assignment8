import ogr
baseFolder = "O:\Student_Data\DieckmannM\python2\session10"
parcels = ogr.Open(baseFolder + "\Parcels.shp", 1)
parcels_lyr = parcels.GetLayer()

roads = ogr.Open(baseFolder + "\Roads.shp", 1)
roads_lyr = roads.GetLayer()

thp = ogr.Open(baseFolder + "\TimberHarvestPlan.shp", 1)
thp_lyr = thp.GetLayer()

parcels_cs = parcels_lyr.GetSpatialRef()

i = 0
id = 0

out_df = pd.DataFrame(columns=["Parcel APN", "NR_GH-Plants", "NR_OD-Plants", "Dist_to_grow_m", "Km Priv. Road", "Km Local Road", "Mean elevation", "PublicLand_YN", "Prop_in_THP"])

feat = parcels_lyr.GetNextFeature()
while feat:
    geom = feat.GetGeometryRef()
    apn = feat.GetField('APN')
    #
    # ############################################################# #
    #### Group 1 #####
    geom_par = feat.geometry().Clone()
    geom_par.Transform(osr.CoordinateTransformation(parcels_cs, mary_cs))

    mary_lyr.SetSpatialFilter(geom_par)

    total_gh = total_od = 0

    point_feat = mary_lyr.GetNextFeature()
    while point_feat:
        total_gh += point_feat.GetField('g_plants')
        total_od += point_feat.GetField('o_plants')
        point_feat = mary_lyr.GetNextFeature()
    mary_lyr.ResetReading()


    #### Group 2 #####
    id += 1
    parcel = geom_par.Clone()
    marihuana_lyr.SetSpatialFilter(parcel)
    feature_count = marihuana_lyr.GetFeatureCount()
    print("ID: " + str(id) + " Feature Count: " + str(feature_count))
    if feature_count > 0:
        marihuana_lyr.SetSpatialFilter(None)
        bufferSize = 0
        exit = 0
        while exit == 0:
            bufferSize = bufferSize + 10

            buffer = parcel.Buffer(bufferSize)
            marihuana_lyr.SetSpatialFilter(buffer)
            buffer_count = marihuana_lyr.GetFeatureCount()
            print("Current buffer size: " + str(bufferSize) + "Current buffer count:" + str(buffer_count))
            # check if more marijuana plants in the buffer as in the parcel
            if buffer_count > feature_count:
                exit += 1
                distance.append = bufferSize
    marihuana_lyr.SetSpatialFilter(None)

    ######### Group 3 ############

    # Set filter for relevant road types
    roads_lyr.SetAttributeFilter("FUNCTIONAL IN ('Local Roads', 'Private')")
    # loop through two categories
    road_feat = roads_lyr.GetNextFeature()
    while road_feat:
        functional = road_feat.GetField('FUNCTIONAL')
        geom_roads = road_feat.GetGeometryRef()
        intersection = geom.Intersection(geom_roads)        # calculate intersection of road types and individual parcel
        length = intersection.Length()                      # get length of intersection
        #print(functional, length)
        road_feat = roads_lyr.GetNextFeature()

    area_parcel = geom.GetArea()

    # timber harvest plan > only use one year (overlapping geometries)
    thp_lyr.SetAttributeFilter("THP_YEAR = '1999'")
    thp_lyr.SetSpatialFilter(geom)                  # Set filter for parcel
    thp_feat = thp_lyr.GetNextFeature()
    area_parcel = geom.GetArea()                    # area of parcel
    thp_list = []

    # loop through selected features
    while thp_feat:
        geom_thp = thp_feat.GetGeometryRef()
        intersect_thp = geom.Intersection(geom_thp) # intersection of parcel and selected thp features
        area = intersect_thp.GetArea()              # area of intersected thp feature
        thp_list.append(area)                       # add area of thp feature to list
        thp_feat = thp_lyr.GetNextFeature()

    thp_sum = sum(thp_list)                         # sum up all thp features in parcel
    thp_prop = thp_sum/area_parcel
    print(thp_prop)

    # ############################################################# #
    #


    out_df.loc[len(out_df) + 1] = [apn, total_gh, total_od, distance,length[1],length[0],mean_elev,thp_prop,thp_sum]  # insert further variables from other groups

    feat = parcels_lyr.GetNextFeature()

parcels_lyr.ResetReading()

out_df.to_csv("output_humboldt_county.csv", index=None, sep=',', mode='a')
